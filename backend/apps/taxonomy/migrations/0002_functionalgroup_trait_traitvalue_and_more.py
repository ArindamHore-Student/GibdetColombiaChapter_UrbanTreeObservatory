# Generated by Django 5.1.7 on 2025-04-14 19:08

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('taxonomy', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FunctionalGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='uuid')),
                ('group_id', models.PositiveSmallIntegerField(help_text='unique identifier for the functional group', unique=True, verbose_name='group id')),
                ('description', models.TextField(blank=True, help_text='description of the functional group', verbose_name='description')),
            ],
            options={
                'verbose_name': 'functional group',
                'verbose_name_plural': 'functional groups',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='uuid')),
                ('type', models.CharField(choices=[('CARBON', 'carbon sequestration index'), ('SHADE', 'shade index'), ('CANOPY', 'maximum diameter of canopy (m)'), ('HEIGHT', 'maximum total height (m)')], max_length=6, verbose_name='trait type')),
            ],
            options={
                'verbose_name': 'trait',
                'verbose_name_plural': 'traits',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='TraitValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='uuid')),
                ('min_value', models.FloatField(help_text='minimum value for this trait in the functional group', verbose_name='minimum value')),
                ('max_value', models.FloatField(help_text='maximum value for this trait in the functional group', verbose_name='maximum value')),
            ],
            options={
                'verbose_name': 'trait value',
                'verbose_name_plural': 'trait values',
            },
        ),
        migrations.AlterModelOptions(
            name='species',
            options={'ordering': ['genus', 'name'], 'verbose_name': 'species', 'verbose_name_plural': 'species'},
        ),
        migrations.RemoveField(
            model_name='species',
            name='growth_habit',
        ),
        migrations.RemoveField(
            model_name='species',
            name='scientific_name',
        ),
        migrations.AddField(
            model_name='species',
            name='gbif_id',
            field=models.CharField(blank=True, help_text='GBIF species identifier', max_length=20, verbose_name='GBIF ID'),
        ),
        migrations.AddField(
            model_name='species',
            name='life_form',
            field=models.CharField(choices=[('TR', 'tree'), ('PT', 'palm tree'), ('SH', 'shrub'), ('OT', 'other')], default='TR', max_length=2, verbose_name='life form'),
        ),
        migrations.AddField(
            model_name='species',
            name='use',
            field=models.CharField(default='No reportado', help_text='common local use of the species', max_length=255, verbose_name='use'),
        ),
        migrations.AlterField(
            model_name='species',
            name='accepted_scientific_name',
            field=models.CharField(default='No identificado', help_text='scientific genus and species name with optional reference to whom named it', max_length=150, verbose_name='accepted scientific name'),
        ),
        migrations.AlterField(
            model_name='species',
            name='origin',
            field=models.CharField(choices=[('EX', 'exotic'), ('NA', 'native'), ('EN', 'endemic'), ('NI', 'not identified')], default='NI', max_length=2, verbose_name='origin'),
        ),
        migrations.AddField(
            model_name='species',
            name='functional_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='species', to='taxonomy.functionalgroup', verbose_name='functional group'),
        ),
        migrations.AddConstraint(
            model_name='species',
            constraint=models.UniqueConstraint(fields=('genus', 'name'), name='unique_genus_species'),
        ),
        migrations.AddField(
            model_name='traitvalue',
            name='functional_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_values', to='taxonomy.functionalgroup', verbose_name='functional group'),
        ),
        migrations.AddField(
            model_name='traitvalue',
            name='trait',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_values', to='taxonomy.trait', verbose_name='trait'),
        ),
        migrations.AddField(
            model_name='functionalgroup',
            name='traits',
            field=models.ManyToManyField(related_name='functional_groups', through='taxonomy.TraitValue', to='taxonomy.trait', verbose_name='traits'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.UniqueConstraint(fields=('trait', 'functional_group'), name='unique_trait_functional_group'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.CheckConstraint(condition=models.Q(('min_value__lte', models.F('max_value'))), name='min_value_less_than_max_value'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.CheckConstraint(condition=models.Q(('min_value__gte', 0)), name='min_value_greater_than_zero'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.CheckConstraint(condition=models.Q(('max_value__gte', 0)), name='max_value_greater_than_zero'),
        ),
    ]
