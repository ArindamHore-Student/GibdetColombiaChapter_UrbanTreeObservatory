# Generated by Django 5.1.7 on 2025-04-17 20:42

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='family name')),
            ],
            options={
                'verbose_name': 'family',
                'verbose_name_plural': 'families',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FunctionalGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('group_id', models.PositiveSmallIntegerField(help_text='Unique identifier for the functional group', unique=True, verbose_name='group id')),
                ('description', models.TextField(blank=True, help_text='Optional description of the functional group', verbose_name='description')),
            ],
            options={
                'verbose_name': 'functional group',
                'verbose_name_plural': 'functional groups',
                'ordering': ['group_id'],
            },
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('type', models.CharField(choices=[('CARBON', 'carbon sequestration index'), ('SHADE', 'shade index'), ('CANOPY', 'maximum diameter of canopy (m)'), ('HEIGHT', 'maximum total height (m)')], max_length=6, verbose_name='trait type')),
            ],
            options={
                'verbose_name': 'trait',
                'verbose_name_plural': 'traits',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='genus name')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genera', to='taxonomy.family', verbose_name='family')),
            ],
            options={
                'verbose_name': 'genus',
                'verbose_name_plural': 'genera',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TraitValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('min_value', models.FloatField(help_text='Minimum value for this trait in the functional group', verbose_name='minimum value')),
                ('max_value', models.FloatField(help_text='Maximum value for this trait in the functional group', verbose_name='maximum value')),
                ('functional_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_values', to='taxonomy.functionalgroup', verbose_name='functional group')),
                ('trait', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trait_values', to='taxonomy.trait', verbose_name='trait')),
            ],
            options={
                'verbose_name': 'trait value',
                'verbose_name_plural': 'trait values',
            },
        ),
        migrations.AddField(
            model_name='functionalgroup',
            name='traits',
            field=models.ManyToManyField(related_name='functional_groups', through='taxonomy.TraitValue', to='taxonomy.trait', verbose_name='traits'),
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(help_text='Species name without the genus', max_length=50, verbose_name='species name')),
                ('accepted_scientific_name', models.CharField(default='No identificado', help_text='Scientific genus and species name with optional reference to whom named it', max_length=150, verbose_name='accepted scientific name')),
                ('origin', models.CharField(choices=[('NA', 'native'), ('CU', 'cultivated'), ('NC', 'native | cultivated'), ('NU', 'naturalized'), ('NL', 'naturalized | cultivated'), ('EN', 'endemic'), ('NI', 'not identified')], default='NI', max_length=2, verbose_name='origin')),
                ('iucn_status', models.CharField(choices=[('DD', 'data deficient'), ('LC', 'least concern'), ('CD', 'lower risk / conservation dependent'), ('NT', 'near threatened'), ('VU', 'vulnerable'), ('EN', 'endangered'), ('CR', 'critically endangered'), ('EW', 'extinct in the wild'), ('EX', 'extinct'), ('NE', 'not evaluated')], default='NE', max_length=2, verbose_name='IUCN status')),
                ('life_form', models.CharField(choices=[('TR', 'tree'), ('PT', 'palm tree'), ('SH', 'shrub'), ('OT', 'other')], default='TR', max_length=2, verbose_name='life form')),
                ('canopy_shape', models.CharField(choices=[('BD', 'broad'), ('CF', 'caulirosula - fan'), ('CR', 'caulirosula - feather'), ('CS', 'caulirosula sespitoso'), ('CO', 'columnar'), ('GL', 'globose'), ('IR', 'irregular'), ('OV', 'oval'), ('PY', 'pyramidal'), ('SG', 'semiglobose'), ('SP', 'spreading'), ('OT', 'other'), ('NI', 'not identified')], default='NI', max_length=50, verbose_name='canopy shape')),
                ('flower_color', models.CharField(choices=[('BR', 'brown'), ('FU', 'fuchsia'), ('GR', 'green'), ('OR', 'orange'), ('PI', 'pink'), ('RE', 'red'), ('VI', 'violet'), ('WH', 'white'), ('YE', 'yellow'), ('OT', 'other'), ('NI', 'not identified')], default='NI', max_length=50, verbose_name='flower color')),
                ('gbif_id', models.CharField(blank=True, help_text='GBIF species identifier', max_length=12, validators=[django.core.validators.RegexValidator(message='GBIF ID must be a positive integer.', regex='^\\d+$')], verbose_name='GBIF ID')),
                ('identified_by', models.CharField(default='Cortolima', max_length=255, verbose_name='identified by')),
                ('date', models.DateField(blank=True, null=True, verbose_name='identified date')),
                ('functional_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='species', to='taxonomy.functionalgroup', verbose_name='functional group')),
                ('genus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species', to='taxonomy.genus', verbose_name='genus')),
            ],
            options={
                'verbose_name': 'species',
                'verbose_name_plural': 'species',
                'ordering': ['genus', 'name'],
                'constraints': [models.UniqueConstraint(fields=('genus', 'name'), name='unique_genus_species')],
            },
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.UniqueConstraint(fields=('trait', 'functional_group'), name='unique_trait_functional_group'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.CheckConstraint(condition=models.Q(('min_value__lte', models.F('max_value'))), name='min_value_less_than_max_value'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.CheckConstraint(condition=models.Q(('min_value__gte', 0)), name='min_value_greater_than_zero'),
        ),
        migrations.AddConstraint(
            model_name='traitvalue',
            constraint=models.CheckConstraint(condition=models.Q(('max_value__gte', 0)), name='max_value_greater_than_zero'),
        ),
    ]
