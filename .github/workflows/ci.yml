name: CI

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit ruff

    - name: Format files with ruff
      run: ruff check . --fix

    - name: Cache pre-commit hooks
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: config.settings.dev
      SECRET_KEY: github-actions-test-key
      DATABASE_URL: postgis://postgres:postgres@localhost:5432/urban_tree_db

    services:
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: urban_tree_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"
        cache: 'pip'

    - name: Install system dependencies
      run: |
          sudo apt-get update
          sudo apt-get install -y binutils libproj-dev gdal-bin libgdal-dev python3-gdal postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Verify PostGIS setup
      run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d urban_tree_db -c "CREATE EXTENSION IF NOT EXISTS postgis;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d urban_tree_db -c "SELECT PostGIS_version();"

    - name: Run Django check
      working-directory: ./backend
      run: python manage.py check

    - name: Run migrations
      working-directory: ./backend
      run: python manage.py migrate

    - name: Run collectstatic
      working-directory: ./backend
      run: python manage.py collectstatic --noinput

    - name: Run tests with coverage
      working-directory: ./backend
      run: python -m pytest --cov=apps --cov-report=term-missing
